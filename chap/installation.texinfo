@node Installation
@chapter Installation

In this chapter you will learn how to install
GNU/Pony, and get information about details
you should thinks about when installing your
system.

@menu
* Partitioning considerations::
* Partitioning and formatting::
* Mounting partitions::
@end menu


@node Partitioning considerations
@section Partitioning considerations

@cindex partitions
When installing your system you should think
about how you want to partition your system.
Exactly how you want to this depends on your
requirements and resources.

@cindex @file{/boot}
@cindex kernel image
@cindex initramfs
@cindex initrd
@cindex bootloader
@cindex chainloading
It is highly recommended to have a partition
for @file{/boot}, the directory containing
the bootloader (see @ref{The bootloader} for
more information), and the kernel image and the
early initialisation image (for more information
see @ref{The initial random access memory disc}).
If you only install one kernel to this
partition, 50 MB will do you quite well. This
partition needs to be a primary partition unless
it is chainloaded from another bootloader.
The size of the a Linux kernel image, depends
on how it is configures, but it is unlikely that
it exceeds 5 MB. The early initialisation image
also unlikely to exceed 5 MB, but a fallback
for this image can be 20 MB. However, it is
recommended to use even 100 MB or even 200 MB,
to be safe, you never now if you want to install
additional images or if the images will grow
larger over the years, an installation of a
rolling release distribution will never need to
be reinstalled and can last forever.

@cindex extended partition
@cindex primary partition
@cindex logical partition
@cindex bootloader
@cindex chainloading
To maximise the flexibility of your partitions,
it recommended to make an extended partition of
the remaining disc space. The bootloader needs
to be in a primary parition to be started by the
boot manager, and if you are using chainloading
it is easiest to chainload into primary paritions,
but beyond that all partitions can be logical.
A primary partition is a regular partition, an
extended partition is a special type of primary
partition than contains additional partitions,
logical partitions. You can only have at most one
extended partition. Including your extended
partition you can only have four primary
partitions, but you can have an unlimited number
of logical partitons@footnote{With the exception
that the kernel as a limited number of majorâ€“minor
number pairs for block devices and only few of
then are for hard drives and partitions}.

@cindex extended partition
@cindex logical partition
@cindex MBR
@cindex Master Boot Record
@cindex GUID Partition Table
@cindex GPT
@cindex Unified Extensible Firmware Interface
@cindex UEFI
@cindex Basic Input/Output System
@cindex BIOS
The limitation of 4 primary and extended
partitions in a limitation in Master
Boot Record (MBR) which is a disc
formatting for how partitions hard layed
out and addressed. If perfer, you can
instead use GUID Partition Table (GPT)
which typically can hold 128 partitions.
Some operating system are not compatibly
with GPT and some cannot boot using it
unless the computer uses Unified Extensible
Firmware Interface (UEFI) (or sometimes
Basic Input/Output System (BIOS).)

@cindex @file{/}
@cindex @file{/usr}
@cindex @file{/usr/local}
@cindex @file{/usr/games}
@cindex @file{/usr/local/games}
@cindex @file{/opt}
@cindex @file{/home}
@cindex @file{/srv}
@cindex @file{/etc}
@cindex @file{/var}
@cindex @file{/info}
@cindex @file{/shared}
How to best partition the rest of the system is
debated. What you have now to consider is the
directories @file{/}, @file{/usr}, @file{/usr},
@file{/usr/local}, @file{/usr/games},
@file{/usr/local/games}, @file{/opt},
@file{/home}, @file{/srv}, @file{/etc},
@file{/var}, @file{/info} and @file{/shared}.
@file{/usr/games} and @file{/usr/local/games}
were initialially introduces because games
are typically large and the hard drives was
not too big back in the days; today not that
many distrubtions even have them, and we do
not recommend creating separate partitions
for them. So the remain directories are:

@table @file
@item /
Essential programs.

@item /usr
Non-essential programs. Today many
distributions symlinks @file{/bin}
to @file{/usr/bin}, @file{/sbin}
to @file{/usr/sbin} and @file{/lib}
to @file{/lib}, but even before that
few recommended to put it on a separate
partition.

@item /usr/local
Programs not included in the distribution:
private software and software not yet
included in the package repository.

@item /opt
Serves as hosting directory for the same
category of programs as @file{/usr}, but
self-contained and large cases. Because
of this and the size of today's hard drives
it is recommended that it is not separated
from @file{/usr}.

@item /home
User home directories. It is generally
agreed that this directory is placed on its
own partition because you do not want to
lose files because you forget to backup
dotfiles or lose it if the system partition
gets corrupted. There is however no sense
in separating it just so you can have two
or more systems sharing it, as the
configuration by the dotfiles can cause
problems.

@item /srv
Directory for services hosted by the machine.

@item /etc
@cindex initramfs
@cindex initrd
Host specific system-wide configurations.
Separating this directory to a partition
separate from @file{/} is tricky but possible:
it must be mounted in the early boot process.

@item /var
Variable data files.

@item /info
GNU/Pony directory for administrated shared files.

@item /shared
GNU/Pony directory for user shared files.

@end table

This is how we recommend that you partition
your system, in four partitions:

@table @asis
@item @file{/}, @file{/var} and @file{/etc}
One partition for the essentials, and the variable
data including the system logs.

@item @file{/usr} and @file{/opt}
One partition for non-essential programs.

@item @file{/usr/local}, @file{/srv}, @file{/home}, @file{/info} and @file{/shared}
One partition for local and user files.

@item Spare partition
A spare partition of the same size as that
of @file{/}. This allows you to backup your
essentials when you know that it is in a
good state, allowing you to boot into it if
@file{/} breaks or gets corrupted.
Additionally this allows you to temporarly
use another partition for @file{/} and
reformat your actual @file{/} into a newer
filesystem without reinstalling your system.

@end table

This partitioning setup is unconventional not
straight forward how to setup. You can
create a hidden directory named @file{~/.parts},
in which you can create two mountpoint
directories: @file{usr}, @file{local},
which can be used from creating @file{/usr}
and @file{/opt} and @file{/usr/local},
@file{/srv}, @file{/home}, @file{/info}
and @file{/shared} as symlinks to inner
directories you need to create.

However, if your @file{/usr} and @file{/opt}
directories are not going to be that large,
it makes more sense to combine that partition
with that of @file{/}.

Someponies recommend putting @file{/var}
into its own partition. This allows you
to mount @file{/} and @file{/etc} in
read only mode. If it is placed in the
same partition as @file{/home} or
@file{/shared} you can limit @file{/} and
@file{/etc} to a very small partition
and let @file{/var} grow as large as
you like.

@pindex UPX
Provided that you do not have too many
local and user files. A GNU/Linux installation
can be quite small. 5 GB can actually be
enough, 10 GB to be safe, if you do not
have that many large programs or too many
programs. A 50 GB partition for all program
can be quite the challenge to deplete,
80 GB is practically impossible to fill.
This can largely be credited to the heavy
use of dynamic linking, and it is even possible
to compress executables with UPX, strip
unused symboles for executables and to
optimise the compilation of problem to
minimise the size of the create executable.

@cindex swap partition
@cindex swap memory
Most users will find that 2 GB is enough
random access memory (RAM), and that even
1 GB can be enough; unless they use
specific programs, or games, that uses a
lot of memory. If you do not do too much
100 MB may actually be enough.
@footnote{Graphical web browers usally
require a bit more memory. If you only
use a graphical web browser 500 MB
should be enough for anypony.}. However,
you will be compilng programs, for this
you will need more memory, at least 4
GB is recommended for the computer you
use to compile your package. If you
feel that you need more, you can create
a swap partition, this is partition in
which the kernel can store memory to
which it feel it does not need frequent
access. If you have not used GNU/Linux
before but are not using any programs
that uses a lot of memory you might want
to create a swap partition large enough
so that it and your RAM totals to 4 GB
and you will be safe.



@node Partitioning and formatting
@section Partitioning and formatting

The first thing you do after booting
the installation medium is to partiting
and format your hard drive.

@pindex @command{fdisk}
@cindex disc paritioning
@cindex paritioning
To partition a drive you can use the
command @command{fdisk}. To partition
your primary drive run
@command{fdisk /dev/sda}. See
@ref{Partitioning considerations} for
recommendations on how to partition
your system. Do not forget to set
the bootflag on the @file{/boot}
partition.

@cindex partition encryption
@cindex encryption, partition
@cindex LUKS
@cindex Linux Unified Key Setup
@pindex dm-crypt
@pindex @command{cryptsetup}
When you have created your partitions
you can set up encryption for your
partitions. You cannot encrypt your
@file{/boot} partition without full
disc encryption, with is not in the
scope of this chapter.@footnote{Of
course it could be possible to find
a boot manager that supports that,
but that is probably not very likely.}
You should consider encryption even
for older computers; encryption does
not impact your performance that
much. In this section you will learn
of to encrypt your partitions with
Linux Unified Key Setup (LUKS).
LUKS cannot be applied or removed
from an existing partition. It can
be used to encrypt your swap partition,
but it is not in the scope if this
chapter.

@cindex encryption benchmark
Before commiting to an encryption
configuration you can benchmark the
performance of the available systems
type running
@command{cryptsetup benchmark}.
To encrypt a non-formatted partition
using the aes-xts-plain64 cipher
(required Linux 2.6.33 or a newer
kernel), with 512-bit key-size and
a passhrase hashed with SHA512
(512 bit Secure Hash Algorithm 2)
taking 5000 milliseconds to verify,
run (for partition @file{/dev/sdx99})
run:

@example
cryptsetup --cipher     aes-xts-plain64 \
           --key-size   512             \
           --hash       sha512          \
           --iter-time  5000            \
           --use-random                 \
           --verify-passphrase          \
           luksFormat /dev/sdx99
@end example

Before the encrypted partitions can
be formatted they must be opened. To
open the now encrypted partition
@file{/dev/sdx99} run:

@example
cryptsetup open --type luks /dev/sdx99 xyz
@end example

This will create the file
@file{/dev/mapper/xyz}, which is mapped
to @file{/dev/sdx99} and encrypts input
and decrypts output. In other words,
@file{/dev/mapper/xyz} is now used instead
of @file{/dev/sdx99} for formatting and
mounting.

@opindex @option{-t}, @command{mkfs}
@opindex @option{--type}, @command{mkfs}
@opindex @option{-L}, @command{mkfs}
@pindex @command{mkfs}
To format the partition @file{/dev/sdx99}
to an ext4 partition, which is the recommended
format for normal users, and give it the
label `xyz' run
@command{mkfs -t ext4 -L xyz /dev/sdx99}.
The option @option{-t} is implemented in
@command{mkfs}, all other options are
implemented by the program that formats
the partition to the selected format,
for example @option{-L} is implemented
in @command{mkfs.ext4}. For more options
available, in for example ext4, run
@command{man mkfs.ext4}. For your
@file{/boot} partition ext2 is recommended.



@node Mounting partitions
@section Mounting partitions

@cindex partition, mount
@cindex partition, unmount
@cindex mount partition
@cindex unmount partition
@pindex @command{mount}
@pindex @command{umount}
@cindex mountpoint
The commands @command{mount DEVICE MOUNTPOINT}
and @command{umount MOUNTPOINT} can be used
to mount and unmount partitions, respectively.
The device is the partition file name in a
fashion similar to @file{/dev/sdx99} or
@file{/dev/mapper/xyz}. A mountpoint is a,
normally empty, directory which should
contain the content of the partition.

@cindex @file{/mnt}
The directory @file{/mnt} is normally used
to mount a filesystem (a formatted partition)
temporarily. It is customary to mount the
@file{/} of the system you are installing
into @file{/mnt}. Doing so means that you
can access file on the system you are
installing by accessing the in @file{/mnt}.
Additional filesystem can be mounted in
@file{/mnt} after you have mounted your
@file{/} (root) partition onto it.
If the system you are installing have two
partitions, @file{/root} and @file{/},
on @file{/dev/sdx1} and @file{/dev/sdx2},
they can be mounted by running:

@example
mount /dev/sdx2 /mnt
mkdir /mnt/boot
mount /dev/sdx1 /mnt/boot
@end example

