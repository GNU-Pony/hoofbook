@node Advanced installation
@chapter Advanced installation

The normal way to install GNU/Pony is by
creating an bootable persistent storage
USB. In this chapter you will learn how
to install GNU/Pony using other methods.


@menu
* Installing without an installation medium::
* A quick introduction to QEMU::
* Installing over QEMU::
@end menu
@c TODO: how to install using SSH
@c TODO: how to install using PXE
@c TODO: how to create a CD or DVD
@c TODO: how to write an installation medium from another operating system
@c TODO: how to create a non-persistent USB
@c TODO: how to create a multi-arch medium
@c TODO: how to create an offline installation medium


@node Installing without an installation medium
@section Installing without an installation medium

If you have a remote server or a computer
without any CD or DVD drive and cannot
boot USB devices or use PXE, you can still
install GNU/Pony using a method described
in this section.

For this, you will require a swap partition
or a partition other than your @file{/boot}
partition that you do not mind losing in
case you are not successful, and a USB
installation medium image.

Rather than copying the installation medium
to a USB device you @command{swapoff} your
swap partition and copy the image to your
swap partition. If your swap partition is
@command{/dev/sdx99}, type:

@example
swapoff /dev/sdx99 #  or swapoff --all
dd if=THE_IMAGE_FILE of=/dev/sdx99
@end example

If you are using an encrypted swap partition
you should @command{dd} into the
@file{/dev/sd*} file and not the
@file{/dev/mapper/*}, and similarly if
you use RAID or LVM for your swap partition.

You do not need to update your bootloader
configuration as you can edit it temporarly
when the bootloader is running. But if
you have it set not show up you should
configuration it to show up, and if you
have a remote server you most set it to
load the former swap partition by default.

When you have @command{dd}:d your
installation medium image to your swap
partition and thereby converting your
swap partition to a regular boot partition
you can reboot your computer and chainload
to it. If your @file{/boot} have SYSLINUX
on it, you can, when SYSLINUX starts,
press @kbd{Tab} and type something similar
to one of the following lines:

@table @command
@item .com chain.c32 hd0 0
Chainload into @file{/dev/sda}.
@item .com chain.c32 hd0 1
Chainload into @file{/dev/sda1}.
@item .com chain.c32 hd0 2
Chainload into @file{/dev/sda2}.
@item .com chain.c32 hd1 0
Chainload into @file{/dev/sdb}.
@item .com chain.c32 hd1 1
Chainload into @file{/dev/sdb1}.
@item .com chain.c32 hd1 2
Chainload into @file{/dev/sdb2}.
@end table

To be on the safe side, do not override
the partition with a new swap partition
before verifing that your installation
is working. And do not override your
existing @file{/boot} just edit the line
for how to boot the operating system
after you have successfully booted into
it.


@node A quick introduction to QEMU
@section A quick introduction to QEMU

Quick Emulator (QEMU) is a fully free
(in constrast to VirtualBox) hypervisor
that performs hardware virtualisation.
QEMU if very fast and is perfect for
testing an operativing system.
@footnote{Bochs (which is not pronounced
as you might expect, it is pronounced like
‘box’) is better if you are doing kernel
development.}

While QEMU does not require any kernel
modules (which can be a huge caveat) is
requires a bit of research to get real
performance out of.

As for with all computer emulator, you
are discouraged from having copy-on-write
enabled on filesystem where you store the
virtual hard disc drive.

To create a virtual hard disc drive,
use the command @command{qemu-img} with
the verb @command{create}. If you want
a 4 GB disc and want it in raw format run:

@example
qemu-img create -f raw disc.raw 4G
@end example

You will now a 4 GB large file, filled
with NUL characters, named @file{disc.raw}.
In this example the disc format was
@code{raw}, so we could also use @command{dd}
or @command{fallocate}, if you want another
format you would have to use @command{qemu-img}.

What is nice about the raw format is that
it can use as the backend file of a loopback
device which allows you to use it directly
on your host machine. It can also be manipulated
directly with tools such as @command{dd}, to
for example install a boot manager.@footnote{If
you are using @command{dd} on the file, do not
forget @option{conv=notrunc}.}

To start QEMU with a CD mounted run:

@example
qemu-system-x86_64 -cdrom cd.iso -boot order=d disc.raw -m 2048
@end example

This is start an x86-64 machine with 2048 MB
of RAM. It will start the ISO file @file{cd.iso}
and have the hard disc drive @file{disc.raw}
as its first hard disc drive, which is named
@file{/dev/sda} on Linux. If you do not need
the CD, just run.

@example
qemu-system-x86_64 disc.raw -m 2048
@end example

These instructions will not give QEMU too much
performance. To boost it, add @option{-smp 3}
to let it use three CPU threads, @option{-sdl},
to use Simple DirectMedia Lay (SDL), and instruct
it to utilise Kernel-based Virtual Machine (KVM):

@example
-machine type=pc,accel=kvm -cpu host
@end example

So the grand total is:

@example
qemu-system-x86_64 -cdrom cd.iso -boot order=d disc.raw  \
     -m 2048 -smp 3 -sdl -machine type=pc,accel=kvm -cpu host
@end example


@node Installing over QEMU
@section Installing over QEMU

It behoves you to read @ref{A quick introduction to QEMU}
before reading this section of the manual.

As QEMU allows you to take any regular file, be it
empty or not, and use it as a raw virtual disc. QEMU
allows you to use a block device file as its disc,
especially interesting with this is that it allows
you to use a real disc for your disc in QEMU.
Natually this requires root permissions:
@footnote{Assuming have not changed permissions for
this disc to allow you to use it without root permissions.}

@example
sudo qemu-system-x86_64 /dev/sdx
@end example

This allows you to run your current system while
installing a new system. QEMU will even update
your kernel's partition table for you when QEMU
exists, assuming it has permission to do so.

With QEMU's superior performance and the
non-requirement for graphics this is probably
a really preferable way to install any operating
system, is it does not require you to run any
specific operative system as long it you can
do this, it stops you from accidentally
typing in the wrong device@footnote{Assuming
you verify it when you first start the
installation system} and it lets test that
everything starts without having to restart
your computer. Better yet, you will have
access to the Internet if you have network
issues on the installation system to help
you troubleshoot, and the bootstrapping of
the system is a minimal part of the installation
process, than you can @command{chroot} to your
new system have continue the installation
process with full native performance, assuming
it uses the same kernel family.

