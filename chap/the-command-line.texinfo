@node The command line
@chapter The command line
@cindex terminal
@cindex shell

The command line is the most powerful
way to interact with the computer, and
it generally is also the fastest way
to perform actions. But it requires
some knowledge to take full advantage
of it. In this chapter you will learn
how to use the command line in less
basic ways.


@menu
* The command line advantage::
* Scripting::
@end menu



@node The command line advantage
@section The command line advantage

@cindex flexibility
@cindex unix-pipes
@cindex pipes
The command line is extremely flexible.
In GNU and all Unix-like systems
command line problems are designed to
to just one thing and be very good at
it. This by itself does not make the
the command line great, rather it makes
it cumbersome to use, but shells in
Unix-like systems — the program that
lets you use the command line — implement
a concept called Unix-pipes. Unix-pipes
is a way to combine programs. This two
designs combine makes the command line
virtually unlimited in its flexibility.

@cindex reliability
@cindex resouce usage
Graphical programs are often immature
and even unstable. In contrast, command
line tools are most often highly
reliable. Not only are graphical
programs not as stable, they are more
resource intensive are often slower
in their output. @footnote{Graphical
text editors are often marginally
faster, but can be much faster when
you paste in a lot of text from
an external clipboard.}

@cindex interaction speed
@cindex speed, interaction
Command line tools are also often
very fast to use, you can perform
most actions by type a dozen or
so keystrokes and you can perform
the one multiple files without
having to repeat the interaction
process. In contrast, many
graphical programs require that
you navigate menus and click
around in long chains. You can
also often find yourself switch
between the mouse and the keyboard
when using text editors and
word processors.

Additionally the command line
is a great learning experience
and have more tools as programmer
often perfer the command line
and find it boring and strenuous
to create graphical user interfaces.

The command line is also a great
diagnostical tool for graphical
programs. All programs, even
graphical ones, can be started
from a terminal. Graphical program
often send more error messages to
the terminal than to dialog boxes,
and you can often fine tune how
to start graphical programs.

@pindex ncurses
But just because a program does
not have a graphical user interface
does not been you have to do
more typing. Some programs,
including basically all text
editors for the terminal, have
graphics inside the terminal,
some even have support for using
the mouse. These programs are
often called ncurses-programs
or curses-programs, named after
the ncurses and curses libraries.
ncurses is a library that makes
it ease to measure the size of
the terminal, use colours and
other formating, configure the
terminal and create graphical
components in the terminal.



@node Scripting
@section Scripting
@cindex scripts
@cindex shell

When you use the command line you
are you are doing using a program
called a shell. A shell is not
just a program for starting other
programs, it is actually an
interpreter for a programming
language of the shell script class
of programming language. A shell
can execute shell script files or
be interactive. In interactive
mode it lets you write in a shell
script language and runs it as
you write in it. This means that
you can create loops, have
conditionals, store values
inside variables, and declare
functions. Most shells use POSIX
shell script and extends it.
But a few have their entirely own
syntax.

If you have create a script file
you can either run it by typing
@command{bash your-script} (for
GNU Bash) or by making it
executable by running
@command{chmod a+x your-script}
and type @command{./your-script}
if it is the current directory,
@command{your-script} if it is
@var{PATH} or by its full file
name.

You can also type
@command{. your-script}. Doing
so includes the your script
the current script, if are in
an interative shell it is like
typing the entire content
of that file.

@pindex @command{awk}
As if that is not enough, there
are other scripting languages
such as Perl, Python and Awk (Gawk)
that also use in the shell by
starting their interpreters.
@command{awk} is the most popular
for this as it is most fitted
for this, even though it is
probably the most difficult of
them to learn.

