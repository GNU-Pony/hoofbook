@node The command line
@chapter The command line
@cindex terminal
@cindex shell

The command line is the most powerful
way to interact with the computer, and
it generally is also the fastest way
to perform actions. But it requires
some knowledge to take full advantage
of it. In this chapter you will learn
how to use the command line in less
basic ways.


@menu
* The command line advantage::
* Scripting::
* The structure of commands::
@end menu



@node The command line advantage
@section The command line advantage

@cindex flexibility
@cindex unix-pipes
@cindex pipes
The command line is extremely flexible.
In GNU and all Unix-like systems
command line problems are designed to
to just one thing and be very good at
it. This by itself does not make the
the command line great, rather it makes
it cumbersome to use, but shells in
Unix-like systems — the program that
lets you use the command line — implement
a concept called Unix-pipes. Unix-pipes
is a way to combine programs. This two
designs combine makes the command line
virtually unlimited in its flexibility.

@cindex reliability
@cindex resouce usage
Graphical programs are often immature
and even unstable. In contrast, command
line tools are most often highly
reliable. Not only are graphical
programs not as stable, they are more
resource intensive are often slower
in their output. @footnote{Graphical
text editors are often marginally
faster, but can be much faster when
you paste in a lot of text from
an external clipboard.}

@cindex interaction speed
@cindex speed, interaction
Command line tools are also often
very fast to use, you can perform
most actions by type a dozen or
so keystrokes and you can perform
the one multiple files without
having to repeat the interaction
process. In contrast, many
graphical programs require that
you navigate menus and click
around in long chains. You can
also often find yourself switch
between the mouse and the keyboard
when using text editors and
word processors.

The command line is a very
convenient, accurate and easy
way to describe how to do something.
Most help you will find on the
Internet will use the command
line and almost always do so
by writting a set of commands
in a forum. But there are also
video using the command line
with a narrator that explains
what is going on.

Additionally the command line
is a great learning experience
and have more tools as programmer
often perfer the command line
and find it boring and strenuous
to create graphical user interfaces.

The command line is also a great
diagnostical tool for graphical
programs. All programs, even
graphical ones, can be started
from a terminal. Graphical program
often send more error messages to
the terminal than to dialog boxes,
and you can often fine tune how
to start graphical programs.

@pindex ncurses
But just because a program does
not have a graphical user interface
does not been you have to do
more typing. Some programs,
including basically all text
editors for the terminal, have
graphics inside the terminal,
some even have support for using
the mouse. These programs are
often called ncurses-programs
or curses-programs, named after
the ncurses and curses libraries.
ncurses is a library that makes
it ease to measure the size of
the terminal, use colours and
other formating, configure the
terminal and create graphical
components in the terminal.



@node Scripting
@section Scripting
@cindex scripts
@cindex shell

When you use the command line you
are you are doing using a program
called a shell. A shell is not
just a program for starting other
programs, it is actually an
interpreter for a programming
language of the shell script class
of programming language. A shell
can execute shell script files or
be interactive. In interactive
mode it lets you write in a shell
script language and runs it as
you write in it. This means that
you can create loops, have
conditionals, store values
inside variables, and declare
functions. Most shells use POSIX
@footnote{POSIX is an abbrivation
for Portable Operating System
Interface, ending with an `X' just
because it is Unix-like.}
shell script and extends it.
But a few have their entirely own
syntax.

If you have create a script file
you can either run it by typing
@command{bash your-script} (for
GNU Bash) or by making it
executable by running
@command{chmod a+x your-script}
and type @command{./your-script}
if it is the current directory,
@command{your-script} if it is
@var{PATH} or by its full file
name.

You can also type
@command{. your-script}. Doing
so includes the your script
the current script, if are in
an interative shell it is like
typing the entire content
of that file.

@pindex @command{awk}
As if that is not enough, there
are other scripting languages
such as Perl, Python and AWK
that also use in the shell by
starting their interpreters.
@command{awk} is the most popular
for this as it is most fitted
for this, even though it is
probably the most difficult of
them to learn.



@node The structure of commands
@section The structure of commands

@pindex @command{echo}
@cindex arguments, command line
@cindex command line arguments
A command is composed of an arbitrary
non-zero number of arguments.
@command{echo} is a simple command that
prints arguments verbatim. @command{echo}
is often built in to the shell so that
a new programs does not need to be
executed every time a shell script prints
something.

@opindex @option{-n}, @command{echo}
If you type @command{echo foobar} the
text `foobar' will be printed to the
terminal on one line, if your type
@command{echo -n foobar} most
implementations of @command{echo} will
not print a line ending at the end of
the output yeilding that the next
output starts on the same line, but
some implements will also print `-n'.

@cindex command line argument whitespace
@cindex command line whitespace
If you type @command{echo foo bar} then
`foo bar' will be printed. But if you
insert additinal whitespace, `foo bar'
will still be printed to same why, there
are still just three arguments: `echo',
`foo' and `bar'. To make `foo bar' just
one argument you can put quotes around
it: @command{echo 'foo bar'}, which makes
it just one word, and all whitespace will
be preserved in the output.

@cindex command line special characters
@cindex special characters, command line
Some characters are special characters:
whitespace, quotes, curly, round and
square brackets, `<', `>' `|', `&', `^'
(for ZSH, but not for GNU Bash), `$', `?',
`*', `~', `\', '#' and grave accent (`)
and depending on surrounding
characters `.' and `-'. Special
characters can be used in verbatim form
by putting them inside single quotes
as in the previous paragraph, or by
putting a backslash (\), this is called
escaping, directly before it. Double
quotes will allow special characters
but whitespace will be included in
verbatim form. A single-quotation mark
cannot be included inside single quotes,
as special character are ignored, indead
you will have to temporarly close the
quote and add an escaped single-quotation
mark ('like'\''this'). Unescaped hashes
(#) outside quotes are comments, everything
on the same line after it, include the
hash itself, is ignored.

@cindex command line options
@cindex options, command line
@cindex command line flags
@cindex flags, command line
Revisiting @command{echo -n}.
Commands can have directives on
how it should behave. Arguments
starting with a dash (and in some
cases pluses) almost always changes
the behaviour of the command, these
are called options. Simple options
such as @option{-n} for
@command{echo} are called flags.
More complex options have associated
values. These values are actually
also called arguments. The associated
value directly follows the option.
Consider the command @command{date}.
It prints the current date and time,
for example:

@example
$ date   # The dollar sign indicates that you are typing the line
Sun  1 Dec 09:03:20 CET 2013
@end example

If you instead what the date of
yesterday (but with the same time)
you can add the option @option{-d}
with the associated value `yesterday':

@example
$ date -d yesterday
Sat 30 Nov 09:03:20 CET 2013
@end example

Exactly how you can combine options
and their associated value depends
on the command, but normally you
can put them in the same argument:

@example
$ date -dyesterday
Sat 30 Nov 09:03:20 CET 2013
@end example

Recall flags, @command{date -u}
prints the date and time but in
Coordinated Universal Time (UTC):

@example
$ date -u
Sat 30 Nov 08:03:20 UTC 2013
@end example

Flags can be combined in the
same argument and can optionally
be combined with a options that
has a value at the end:

@example
$ date -udyesterday
Sat 30 Nov 08:03:20 UTC 2013

$ date -ud yesterday
Sat 30 Nov 08:03:20 UTC 2013

$ date -duyesterday  # works, but the value is incorrect
date: invalid date ‘uyesterday’

$ date -du yesterday  # not what you meant
date: the argument ‘yesterday’ lacks a leading '+';
when using an option to specify date(s), any non-option
argument must be a format string beginning with '+'
Try 'date --help' for more information.
@end example

Options, including flags, like
these — those starting with a
single dash (or plus) — are called
short options and exists in most
programs and is a convension from
Unix. GNU with is a Unix-like system
improved on this by adding long
options, these are easier to remember
and much easier to understand.
Long options starts with two dashes
(or two pluses), must programs
implements long option alternatives
to short options, but some programs
do not even have short options for
some options:

@example
$ date --utc --date yesterday
Sat 30 Nov 08:03:20 UTC 2013
@end example

Long options cannot be combined,
and their associated values must
either be in there own arguments
or combined using an equals sign:

@example
$ date --utc --date=yesterday
Sat 30 Nov 08:03:20 UTC 2013
@end example

Some options have an associated
value that is options. Consider the
source control management system
Git, it use GNU Privacy Guard (GPG;
GnuPG) to digitally sign commits:

@example
git commit -S
git commit --gpg-sign
@end example

Both signs the commit it creates
with your default key. If you
want to sign with your GPG key
XXXXXXXX you can type either of:

@example
git commit -SXXXXXXXX
git commit --gpg-sign=XXXXXXXX
@end example

But you cannot type any of:

@example
git commit -S XXXXXXXX
git commit --gpg-sign XXXXXXXX
@end example

@cindex command line verb
@cindex verb, command line
In these examples, @command{commit}
is called a verb, it specifies
what subsystem in Git to call, and
must be placed before all options.

@opindex @option{--}
@opindex @option{++}
There is also a special short
option supported by most programs:
@option{--}. It stops all arguments
after it to be parsed as options,
it is often used, especially in
scripts, to make sure that filenames
are not parsed as options if they
start with dash. Many GNU/Pony
programs use a library called
`argparser'. Programs using
argparser and few other programs
supports the short option
@option{++} which prevents only
the next argument to be parsed as
an option. However, @option{--}
and @option{++},
can seldomly be combined with
other short options.

@pindex @command{find}
A few programs, such as @command{find},
uses alternative options. These are
long options that only have one dash.
The reason for this complication is
that long options were never used in
Unix, and GNU needed to be backwards
compatible with Unix. @command{find},
list all files in the current directory
and all subdirectories. But it can also
filter its output; if you want to list
all files named `my-document' you run
@command{find -name my-document}.

